---
import { Icon } from "astro-icon/components";
import Container from "@/components/container.astro";
import Dropdown from "./dropdown.astro";
import { Astronav, MenuItems, MenuIcon } from "astro-navbar";

interface MenuItem {
  title: string;
  path: string;
  children?: MenuItem[];
  badge?: boolean;
}

const navitems: MenuItem[] = [
  {
    title: "Product",
    path: "/",
  },
  {
    title: "About",
    path: "/about",
  },
  {
    title: "Team",
    path: "/team",
  },
  {
    title: "Contact",
    path: "/contact",
  },
];
---

<header class="absolute inset-x-0 top-0 z-50 py-4 lg:py-6">
  <Container>
    <nav class="flex items-center justify-between">
      <!-- Logo -->
      <a href="/" class="flex items-center gap-2">
        <!-- <Icon name="logo" class="h-8 w-auto" /> -->
        <span class="text-lg font-bold text-black">InSkin Lab</span>
      </a>

      <!-- Desktop Menu -->
      <ul class="hidden lg:flex items-center gap-3">
        {
          navitems.map((item) => (
            <li>
              <a
                href={item.path}
                class="px-3 py-2 text-gray-800 hover:text-black hover:font-bold"
              >
                {item.title}
              </a>
            </li>
          ))
        }
      </ul>

      <!-- Mobile Menu -->
      <div class="lg:hidden mobile-menu-wrapper">
        <Astronav>
          <div class="flex items-center justify-between">
            <div class="block lg:hidden mobile-menu-icon-wrapper">
              <MenuIcon class="w-4 h-4 text-gray-800" />
            </div>
          </div>
          <MenuItems class="hidden absolute top-16 left-0 right-0 z-50 w-full bg-white shadow-lg lg:w-auto mt-2 lg:flex lg:mt-0">
            <ul class="flex flex-col lg:flex-row lg:gap-3 p-4 mobile-menu-items-list">
              {
                navitems.map((item) => (
                  <li>
                    <a
                      href={item.path}
                      class="flex w-full px-3 py-2 items-center text-gray-800 hover:text-black hover:font-bold"
                    >
                      {item.title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </MenuItems>
        </Astronav>
      </div>
    </nav>
  </Container>
</header>

<script>
  let isNavbarListenerInitialized = false;

  function initNavbarListener() {
    if (isNavbarListenerInitialized) {
      return;
    }

    const MAX_RETRIES = 10;
    let retryCount = 0;

    function findElementsAndAttachListeners() {
      const menuWrapper = document.querySelector(".mobile-menu-wrapper");
      const iconWrapper = document.querySelector(".mobile-menu-icon-wrapper");
      const menuItemsList = document.querySelector(".mobile-menu-items-list");
      const menuItemsContainer = menuItemsList
        ? menuItemsList.parentElement
        : null;
      const iconSvg = iconWrapper ? iconWrapper.querySelector("svg") : null;

      if (menuWrapper && iconWrapper && menuItemsContainer && iconSvg) {
        attachListeners(menuWrapper, iconSvg, menuItemsContainer);
        isNavbarListenerInitialized = true;
      } else {
        retryCount++;
        if (retryCount < MAX_RETRIES) {
          setTimeout(findElementsAndAttachListeners, 150);
        }
      }
    }

    function attachListeners(menuWrapper, iconClickTarget, menuItemsContainer) {
      function simulateClick(element) {
        if (!element) return;
        const mousedownEvent = new MouseEvent("mousedown", {
          bubbles: true,
          cancelable: true,
        });
        element.dispatchEvent(mousedownEvent);
        const mouseupEvent = new MouseEvent("mouseup", {
          bubbles: true,
          cancelable: true,
        });
        element.dispatchEvent(mouseupEvent);
        const clickEvent = new MouseEvent("click", {
          bubbles: true,
          cancelable: true,
        });
        element.dispatchEvent(clickEvent);
      }

      const handleOutsideClick = (event) => {
        const isMenuOpen = !menuItemsContainer.classList.contains("hidden");
        if (!isMenuOpen) {
          return;
        }

        const isClickInside = menuWrapper.contains(event.target);
        if (!isClickInside) {
          simulateClick(iconClickTarget);
        }
      };

      document.addEventListener("click", handleOutsideClick, true);

      document.addEventListener(
        "astro:before-swap",
        () => {
          document.removeEventListener("click", handleOutsideClick, true);
          isNavbarListenerInitialized = false;
        },
        { once: true },
      );
    }

    findElementsAndAttachListeners();
  }

  document.addEventListener("astro:page-load", () => {
    isNavbarListenerInitialized = false;
    initNavbarListener();
  });

  document.addEventListener("DOMContentLoaded", () => initNavbarListener());
</script>
